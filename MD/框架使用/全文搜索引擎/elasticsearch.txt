#获取某个索引的映射信息
GET /indexName/_mapping

#获取某个索引下投个type的映射信息
GET /indexName/_mapping/typeName

#获取多个索引下的指定映射信息
GET /index*/_mapping/typeName

#创建别名
PUT /indexName/_alias/indexAliasName

#查看所有的别名
GET /_alias

#查看某个索引下的别名
GET /indexName/_alias

#内置标准分词器
POST _analyze
{
	"analyzer":"standard",
	"text":"i am a school"
}


#删除索引
DELETED /school

#创建索引
PUT /school
{
	"settings":{
		"index":{
			"number_of_shards":5,
			"number_of_replicas":1
		}
	}
} 

#创建类型
PUT /school/student/1
{
	"name":"zhangsan",
	"age":25,
	"course":"elasticsearch",
	"study_date":"2019-09-04T20:00:00+0800"
}

#自动生成Id
POST /school/student/
{
	“name”:"lisi",
	"age":26,
	"course":"springboot",
	"study_date":"2019-09-04T20:00:00+0800"
}

#创建一个全新的文档，如果文档存在，则报错
POST /school/student/1?op_type=create
{
	“name”:"lisi",
	"age":26,
	"course":"springboot",
	"study_date":"2019-09-04T20:00:00+0800"
} 

#获取文档信息
GET /school/student/1

#检查文档是否存在 存在返回200 不存在返回404
HEAD /school/student/1

#获取文档，指定字段，逗号分隔
GET /school/student/1?_source=name,age
#仅获取source字段内容
GET /school/student/1/_source

#跟新文档，注意version的变化
#在elasticsearch内部文档是不可改变的，如果想更新现有文档，需要重建索引或进行替换
PUT /school/student/1
{
	"name":"zhangsan",
	"age":25,
	"course":"elasticsearch",
	"study_date":"2019-09-04T20:00:00+0800"
}

#通过 _update API 的方式更新部分字段
POST /school/student/1/_update
{
	"doc":{
		"age":28,
		"sex":"male"
	}
}

#---------------------并发控制-----------------#

#指定版本进行更新
PUT /school/student/1?version=1
{
	data
}

#采用外部版本号，可以更新比当前版本号大的为胆囊
PUT /school/student/1?version=1&version_type=external
{
	data
}

#新版本增加update_by_query
POST /school/_update_by_query?


#--------------------------------------#
#删除文档
DELETE /school/school/student/1
#不可以删除类型
DELETE /school/student
#可以直接删除一个索引
DELETE /school

#新版本增加了delete_by_query

#-----------------游标---------------------#
#空搜索
GET /_search 默认返回前10条
#获取指定类型的文档
GET /school/student/_search
#分页查询
GET /school/student/_search?size=2&from=2

#轻量搜索
GET /school/student/_search?q=name:zhangsan  #name字段值为zhangsan的值
GET /school/student/_search?q=elasticsearch    所有字段值为elasticsearch的数据
GET /school/student/_search?q

#批量获取scroll scan

#创建游标
GET /school/_search?scroll=1m
{
	"query":{
		"match_all":{}
	}
	"sort"[
		"_doc"
	],
	"size":2
}

#根据游标取数据
GET /_search/scroll
{
	"scroll":"1m",
	"scroll_id":"id_info"
}


#----------------dsl查询------------------#
#match_all
GET fishpond_buyer/profile/_search
{
  "query": {
    "match_all": {}
  }
}


#match(分词)
GET fishpond_buyer/profile/_search
{
  "query": {
    "match": {
      "id": "林丽捷1105_68225070"
    }
  }
}

#match短语(不分词)
GET fishpond_buyer/profile/_search
{
  "query": {
    "match_phrase": {
      "id.keyword": "林丽捷1105_68225070"
    }
  }
}


#match前缀查询
GET fishpond_buyer/profile/_search
{
  "query": {
    "match_phrase_prefix": {
      "id": "林丽捷"
    }
  }
}

#multi match查询(多字段匹配)
GET fishpond_buyer/profile/_search
{
  "query": {
    "multi_match": {
      "query": "614339066737",
      "fields": ["bought_spu_ids.all","inquired_spu_ids.last_30_day"]
    }
  }
}

#term查询 
GET fishpond_buyer/profile/_search
{
  "query": {
    "term": {
      "id.keyword": "林丽捷1105_68225070"
    }
  }
}

#terms查询 
GET fishpond_buyer/profile/_search
{
  "query": {
    "terms": {
      "bought_spu_ids.all": ["614339066737"]
    }
  }
}

#范围查询 
#gt: greater than 大于
#gte: greater than or equal 大于等于
#lt: less than 小于
#lte: less than or equal 小于等于
GET fishpond_buyer/profile/_search
{
  "query": {
    "range": {
      "update_time_ms": {
        "gte": 1596321053101,
        "lte": 1596321059101
      }
    }
  }
}

GET fishpond_buyer/profile/_search
{
  "query": {
    "range": {
      "update_time_ms": {
        "from":1596321053101,
        "to":null
      }
    }
  }
}

#bool查询 
GET fishpond_buyer/profile/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "store_id": "68225070"
          }
        }
      ],
      "must_not": [
        {
          "term": {
            "buyer_nick.keyword": {
              "value": "林丽捷1105"
            }
          }
        }
      ],
      "should": [
        {"match": {
          "buyer_nick.keyword": "章正国"
        }},
        {"match": {
          "buyer_nick.keyword": "惜诺小小"
        }}
      ]
    }
  }
}

GET fishpond_buyer/profile/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "terms":{
            "bought_spu_ids.all": ["614339066737"]
          }
        }
      ]
    }
  }
}


GET fishpond_buyer/profile/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "store_id": "68225070"
          }
        }
      ],
      "must_not": [
        {
          "term": {
            "buyer_nick.keyword": {
              "value": "林丽捷1105"
            }
          }
        }
      ],
      "should": [
        {"match": {
          "buyer_nick.keyword": "章正国"
        }},
        {"match": {
          "buyer_nick.keyword": "惜诺小小"
        }}
      ],
      "filter": {
        "terms": {
          "region.province.keyword": [
            "江苏省"
          ]
        }
      }
    }
  }
}


GET fishpond_buyer/profile/_search
{
  "from": 1000,
  "size": 2,
  "query": {
    "match_all": {}
  },
  "_source": {
    "includes": [
      "buyer_nick"
    ],
    "excludes": []
  }
}


#scroll create
GET fishpond_buyer/profile/_search?scroll=1m
{
  "from": 0,
  "size": 2,
  "query": {
    "match_all": {}
  },
  "_source": {
    "includes": [
      "buyer_nick"
    ],
    "excludes": []
  }
}

#scroll search
GET _search/scroll
{
  "scroll":"1m",
  "scroll_id":"DnF1ZXJ5VGhlbkZldGNoGAAAAAAAPHomFjZIQWd5cUgyU1pxZHRhRTBvNFpseXcAAAAAADxb2RYzRzl3SE45OFJqaVN1MkdLSHlUb3dnAAAAAAA7ukkWWGRHUHNUSzhULVdKc2dYTWUwV2puZwAAAAAAPEzmFnZOSGdSMjUzUkJLalUwOE0yVGV1a2cAAAAAADx6JxY2SEFneXFIMlNacWR0YUUwbzRabHl3AAAAAAA8hdMWeEk3eHF3Q0VTLUtfbTc2TnBuR2RyZwAAAAAAPEA4Fl9OLTZCb0pDUzRHbVdrMFdQVkNmbVEAAAAAADxb2hYzRzl3SE45OFJqaVN1MkdLSHlUb3dnAAAAAAA8QDkWX04tNkJvSkNTNEdtV2swV1BWQ2ZtUQAAAAAAPFvbFjNHOXdITjk4UmppU3UyR0tIeVRvd2cAAAAAADyF1BZ4STd4cXdDRVMtS19tNzZOcG5HZHJnAAAAAAA8W9wWM0c5d0hOOThSamlTdTJHS0h5VG93ZwAAAAAAPHopFjZIQWd5cUgyU1pxZHRhRTBvNFpseXcAAAAAAD3xRBZPenM5bFEwWVIyNnFmbnhsTHlSR2tnAAAAAABHo7MWM2cwaE1LODdTR3VlNlNPMkUxSzlyZwAAAAAASQjSFmdPOEZvLVVrU0Z5MTFCb1RzZkphaGcAAAAAADwPxhZSMHFnVWhDdVNseW1DcmNTUlVMUTNBAAAAAAA8eigWNkhBZ3lxSDJTWnFkdGFFMG80Wmx5dwAAAAAAO9XHFnBzbTBMWllsUVk2VU1YaW9jQm54c2cAAAAAADxM5xZ2TkhnUjI1M1JCS2pVMDhNMlRldWtnAAAAAAA78ywWYVgwdm90TWFTcVd1VUswaklHU2lBdwAAAAAAR6O0FjNnMGhNSzg3U0d1ZTZTTzJFMUs5cmcAAAAAAEkI0xZnTzhGby1Va1NGeTExQm9Uc2ZKYWhnAAAAAAA8W90WM0c5d0hOOThSamlTdTJHS0h5VG93Zw=="
}



















